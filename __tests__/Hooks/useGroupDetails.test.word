/*import React from 'react';
import { render, fireEvent, waitFor, screen } from '@testing-library/react-native';
import { Text, Button } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';

import { useGroupDetails } from '../../hooks/useGroupDetails';

// Mock the Appwrite SDK methods for all data access
jest.mock('@/lib/appwrite', () => ({
  databases: {
    getDocument: jest.fn(),
    listDocuments: jest.fn(),
    createDocument: jest.fn(),
    updateDocument: jest.fn(),
  },
}));

const MOCK_GROUP = {
  $id: 'group1',
  title: 'Trip to Bali',
  description: 'Fun trip',
  members: ['user1', 'user2'],
  createdBy: 'user1',
  avatar: null,
};
const MOCK_USER_1 = { $id: 'user1', username: 'alice', avatar: null };
const MOCK_USER_2 = { $id: 'user2', username: 'bob', avatar: null };
const MOCK_EXPENSES = [
  {
    $id: 'exp1',
    amount: 123.45,
    paidBy: 'user1',
    splitBetween: ['user1', 'user2'],
    splitType: 'equal',
    customSplit: null,
    description: 'Groceries',
    groupId: 'group1',
    category: 'Food',
    $createdAt: '2025-07-18T00:00:00Z',
  }
];
const MOCK_SETTLEMENTS = [
  {
    $id: 'settle1',
    from: 'user2',
    to: 'user1',
    amount: 100,
    groupId: 'group1',
    $createdAt: '2025-07-18T00:00:00Z',
  }
];

// Consistent Appwrite mock setup for every test run
function setupMocks(appwrite: any) {
  appwrite.databases.getDocument.mockImplementation(
    (_db: string, coll: string, id: string) => {
      if (coll.includes('GROUP')) {
        if (id === 'group1') return Promise.resolve(MOCK_GROUP);
        return Promise.reject(new Error('Group not found'));
      }
      if (coll.includes('USER')) {
        if (id === 'user1') return Promise.resolve(MOCK_USER_1);
        if (id === 'user2') return Promise.resolve(MOCK_USER_2);
        return Promise.reject(new Error('User not found'));
      }
      return Promise.reject(new Error('Not found'));
    }
  );
  appwrite.databases.listDocuments.mockImplementation(
    (_db: string, coll: string, _q: any) => {
      if (coll.includes('EXPENSE')) return Promise.resolve({ documents: MOCK_EXPENSES });
      if (coll.includes('SETTLEMENT')) return Promise.resolve({ documents: MOCK_SETTLEMENTS });
      if (coll.includes('USER')) return Promise.resolve({ documents: [MOCK_USER_1, MOCK_USER_2] });
      return Promise.resolve({ documents: [] });
    }
  );
  appwrite.databases.createDocument.mockResolvedValue({});
  appwrite.databases.updateDocument.mockResolvedValue({});
}

// Test wrapper exposing all hook state and actions
const TestComponent: React.FC<{ groupId: string | undefined }> = ({ groupId }) => {
  const hook = useGroupDetails(groupId);

  return (
    <>
      <Text testID="loading">{hook.loading ? 'Loading' : 'Loaded'}</Text>
      <Text testID="error">{hook.error}</Text>
      <Text testID="title">{hook.group ? hook.group.title : 'No group'}</Text>
      <Text testID="members">{hook.memberProfiles.map((p) => p.username).join(',')}</Text>
      <Text testID="expenses">{hook.expenses.length}</Text>
      <Text testID="settlements">{hook.settlements.length}</Text>
      <Text testID="totalExpenses">{hook.totalExpenses}</Text>
      <Text testID="searchQuery">{hook.searchQuery}</Text>
      <Button title="ExpandMembers" testID="expand" onPress={() => hook.setMembersExpanded(true)} />
      <Button title="SetSearch" testID="set-search" onPress={() => hook.setSearchQuery('alice')} />
      <Button title="HandleSearch" testID="handle-search" onPress={hook.handleSearch} />
      <Button title="HandleAddMember" testID="add-member" onPress={() => hook.handleAddMember('user2')} />
      <Button title="ShowAllExpenses" testID="show-all-expenses" onPress={() => hook.setShowAllExpenses(true)} />
    </>
  );
};

// Real test navigator to supply route/navigation context
const Stack = createStackNavigator();

function TestNavigator({ groupId }: { groupId?: string }) {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="TestScreen">
          {() => <TestComponent groupId={groupId} />}
        </Stack.Screen>
      </Stack.Navigator>
    </NavigationContainer>
  );
}

describe('useGroupDetails (Expo React Native hook with navigation context)', () => {
  let appwrite: any;
  beforeEach(() => {
    jest.clearAllMocks();
    appwrite = require('@/lib/appwrite');
    setupMocks(appwrite);
  });

  it('fetches group, profiles, expenses, settlements', async () => {
    render(<TestNavigator groupId="group1" />);
    expect(screen.getByTestId('loading').props.children).toBe('Loading');
    await waitFor(() =>
      expect(screen.getByTestId('loading').props.children).toBe('Loaded')
    );
    expect(screen.getByTestId('title').props.children).toBe('Trip to Bali');
    expect(screen.getByTestId('members').props.children).toMatch(/alice/);
    expect(screen.getByTestId('expenses').props.children).toBe(1);
    expect(screen.getByTestId('settlements').props.children).toBe(1);
    expect(screen.getByTestId('totalExpenses').props.children).toBe(123.45);
  });

  it('returns no group for missing groupId', async () => {
    render(<TestNavigator groupId={undefined} />);
    await waitFor(() =>
      expect(screen.getByTestId('title').props.children).toBe('No group')
    );
  });

  it('shows error if group fetch fails', async () => {
    appwrite.databases.getDocument.mockRejectedValueOnce(new Error('Group not found'));
    render(<TestNavigator groupId="failgroup" />);
    await waitFor(() =>
      expect(screen.getByTestId('error').props.children).toBe('Group not found.')
    );
  });

  it('expands members with setMembersExpanded', async () => {
    render(<TestNavigator groupId="group1" />);
    fireEvent.press(screen.getByTestId('expand'));
  });

  it('search and handleSearch functionality', async () => {
    render(<TestNavigator groupId="group1" />);
    fireEvent.press(screen.getByTestId('set-search'));
    expect(screen.getByTestId('searchQuery').props.children).toBe('alice');
    await waitFor(async () => {
      fireEvent.press(screen.getByTestId('handle-search'));
    });
  });

  it('add member (handleAddMember) does not add existing', async () => {
    render(<TestNavigator groupId="group1" />);
    fireEvent.press(screen.getByTestId('add-member'));
    expect(screen.getByTestId('members').props.children.split(',')).toContain('bob');
  });

  it('show all expenses (setShowAllExpenses)', async () => {
    render(<TestNavigator groupId="group1" />);
    fireEvent.press(screen.getByTestId('show-all-expenses'));
  });

  // Add more tests for settleUp, getUsername, handleRemoveMember as needed.
  // For handleRemoveMember, you may need to mock Alert.alert and check the call.
});*/
